# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Build, Test, and Publish

on:
  push:
    branches: [ "main", "feature/*", "release/*" ]
    tags: [ 'v*.*.*' ] # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read # Default read permission
  issues: write
  packages: write
  pull-requests: write
  actions: write
  statuses: write
  checks: write

jobs:
  build:
    defaults: 
      run:
        working-directory: ./src
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        

    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Build Solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal

    # Run tests for all triggers (push, pull_request, tag)
    - name: "Restore/Build/Test"
      run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"
      working-directory: ${{ github.workspace }}
      
        
    - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
      with:
        reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
        reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: "Code Coverage" # Optional title.
        tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
        customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

    - name: Upload Combined Coverage XML
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: ${{ github.workspace }}/Cobertura.xml
        retention-days: 5

    - name: Publish Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "Cobertura.xml"
        badge: true
        fail_below_min: false # just informative for now
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: "10 30"

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request' # Only run for pull requests
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Upload Test Result Files
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/**/TestResults/**/*
        retention-days: 5

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.18.0
      if: always()
      with:
        # NOTE: using trx_files instead of files due to https://github.com/EnricoMi/publish-unit-test-result-action/issues/424
        trx_files: "${{ github.workspace }}/**/*.trx"

    # Copy README to src directory for packing
    - name: Copy README for NuGet pack
      run: cp ${{ github.workspace }}/ReadMe.md ${{ github.workspace }}/src/ReadMe.md

    # Pack step: Run always to ensure no errors in the pack step
    - name: Pack NuGet package
      run: dotnet pack --configuration Release --no-build --output ./artifacts

    # Upload Package Artifact: Only run for tags
    - name: Upload NuGet Package artifact
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: nugetPackage
        path: ./artifacts/*.nupkg
        retention-days: 1 # Keep artifact only for a short time

  publish:
    # Only run for tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build # Run after build job completes
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create GitHub releases
    concurrency:
      group: 'publish-${{ github.ref_name }}'
      cancel-in-progress: true


    steps:
    - name: Download NuGet package artifact
      uses: actions/download-artifact@v4
      with:
        name: nugetPackage
        path: ./artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Publish to NuGet
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./artifacts/*.nupkg
        # The release name will be the tag name (e.g., v1.0.0)
        # The body can be customized, here it's empty by default
        # Set generate_release_notes: true to auto-generate notes based on commits since last tag
        generate_release_notes: true
